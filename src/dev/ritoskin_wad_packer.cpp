/*
MIT License

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

The rights go to scarlet.
*/

#include "ritoskin_wad.h"

namespace std_fs = std::filesystem;
using json = nlohmann::json;

std::string a(const std::string& b) {
    if (b.empty()) return b;
    std::string c = b;
    c[0] = std::toupper(c[0]);
    for (size_t d = 1; d < c.size(); ++d) {
        c[d] = std::tolower(c[d]);
    }
    return c;
}

static auto e(std_fs::path f, std_fs::path g) -> std_fs::path {
    trace_func(trace_var("{}", f), trace_var("{}", g));
    throw_if(f.empty());

    if (g.empty()) {
        std::string h = f.filename().string();
        std::string i = a(h);
        g = f.parent_path() / (i + ".wad.client");
    }

    print("Pack: {}", f);
    auto j = wad::Archive{};
    for (auto const& k : std_fs::recursive_directory_iterator(f)) {
        if (!k.is_regular_file()) continue;
        auto l = k.path();
        print("Read: {}", l);
        j.add_from_directory(l, f);
    }

    print("Write: {}", g);
    j.write_to_file(g);

    return g;
}

void m(const std::string& n, const std_fs::path& o) {
    json p = {
        {"Author", "nylish & kobzar"},
        {"Description", "Generated by RitoSkin"},
        {"Heart", ""},
        {"Name", n},
        {"Version", "1.0.0"}
    };
    std::ofstream q(o);
    q << p.dump(4);
}

std::string r(const std::string& s) {
    std::array<char, 128> t;
    std::string u;
#ifdef _WIN32
    std::shared_ptr<FILE> v(_popen(s.c_str(), "r"), _pclose);
#else
    std::shared_ptr<FILE> v(popen(s.c_str(), "r"), pclose);
#endif
    if (!v) throw std::runtime_error("popen() failed!");
    while (fgets(t.data(), t.size(), v.get()) != nullptr) {
        u += t.data();
    }
    return u;
}

void w(const std::string& x, const std_fs::path& y, const std_fs::path& z) {
    std_fs::path aa = z / "WAD";
    std_fs::path ab = z / "META";

    std_fs::create_directories(aa);
    std_fs::create_directories(ab);

    std_fs::path ac = aa / y.filename();
    std_fs::rename(y, ac);

    m(x, ab / "info.json");
}

void ad(const std_fs::path& ae, const std::string& af) {
    zip_t* ag = zip_open((af + ".zip").c_str(), ZIP_DEFAULT_COMPRESSION_LEVEL, 'w');
    if (!ag) {
        throw std::runtime_error("Failed to create zip file.");
    }

    auto ah = [&](const std_fs::path& ai) {
        for (const auto& aj : std_fs::recursive_directory_iterator(ai)) {
            if (aj.is_regular_file()) {
                std::string ak = aj.path().string();
                std::string al = std_fs::relative(aj.path(), ae).string();
                if (zip_entry_open(ag, al.c_str()) != 0) {
                    throw std::runtime_error("Failed to open zip entry: " + al);
                }
                std::ifstream am(ak, std::ios::binary);
                std::vector<char> an((std::istreambuf_iterator<char>(am)), std::istreambuf_iterator<char>());
                if (zip_entry_write(ag, an.data(), an.size()) != 0) {
                    throw std::runtime_error("Failed to write zip entry: " + al);
                }
                zip_entry_close(ag);
            }
        }
    };

    ah(ae / "WAD");
    ah(ae / "META");

    zip_close(ag);
    std::cout << "Created zip file '" << af << ".zip' with META and WAD folders." << std::endl;
}

int main(int ao, char** ap) {
    try {
        std_fs::path aq = ap[0];
        std_fs::path ar, as;

        auto at = std_fs::current_path();
        std::vector<std_fs::path> au;
        for (const auto& av : std_fs::directory_iterator(at)) {
            if (av.is_directory()) {
                au.push_back(av.path());
            }
        }

        if (au.empty()) {
            throw std::runtime_error("No folders found in the current directory.");
        }

        for (const auto& aw : au) {
            ar = aw;
            std::string ax = ar.filename().string();

            std_fs::path ay = e(ar, "");

            std_fs::path az = std_fs::temp_directory_path() / ax;
            std_fs::create_directories(az);

            w(ax, ay, az);

            ad(az, ax);

            std_fs::remove_all(az);
        }

    } catch (std::exception const& ba) {
        if (ao <= 2) {
            print(stderr, "Press enter to exit...!\n");
            getc(stdin);
        }
        return EXIT_FAILURE;
    }
    return EXIT_SUCCESS;
}
